{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegistrationComponent = class RegistrationComponent {\n  constructor(serv1, formBuilder, router, http) {\n    this.serv1 = serv1;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.http = http;\n    this.submitted = false;\n  }\n  //Hook  function\n  ngOnInit() {\n    //object\n    this.signupForm = this.formBuilder.group({\n      fullname: ['', [Validators.required, Validators.minLength(6), this.customename()]],\n      email: ['', [Validators.required, Validators.email]],\n      pwd: ['', [Validators.required, Validators.minLength(8)]],\n      cfrmpwd: ['', [Validators.required, Validators.minLength(8), this.Match('pwd', 'cfrmpwd')]],\n      mobile: ['', [Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{10}$\")]]\n    });\n  }\n  //validations\n  get func() {\n    return this.signupForm.controls;\n  }\n  customename() {\n    return ctrl => {\n      var regexpression = /^[a-zA-Z]+$/;\n      if (!regexpression.test(ctrl.value)) {\n        return {\n          namenotmatch: true\n        };\n      }\n      return null;\n    };\n  }\n  Match(controlName, checkcontrolName) {\n    return ctrl => {\n      const control = ctrl.get(controlName);\n      const checkControl = ctrl.get(checkcontrolName);\n      if (checkControl?.errors && !checkControl.errors['matching']) {\n        return null;\n      }\n      if (control?.value !== checkControl?.value) {\n        return {\n          matching: true\n        };\n      } else {\n        return null;\n      }\n    };\n  }\n  keyPress(event) {\n    const pattern = /[0-9\\+\\-\\ ]/;\n    let inputChar = String.fromCharCode(event.charCode);\n    if (event.keyCode != 8 && !pattern.test(inputChar)) {\n      event.preventDefault();\n    }\n  }\n  //jsp server used navigate another page\n  signUp() {\n    this.submitted = true;\n    if (this.signupForm.invalid) {\n      return;\n    }\n    this.http.post(\"http://localhost:3000/signupUser\", this.signupForm.value).subscribe(res => {\n      alert(\"Regitration Successful !\");\n      console.log(this.signupForm.value);\n      this.signupForm.reset();\n      this.router.navigate(['/Login']);\n    }, err => {\n      alert(\"Something went wrong\");\n    });\n  }\n};\nRegistrationComponent = __decorate([Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})], RegistrationComponent);\nexport { RegistrationComponent };","map":{"version":3,"names":["Component","Validators","RegistrationComponent","constructor","serv1","formBuilder","router","http","submitted","ngOnInit","signupForm","group","fullname","required","minLength","customename","email","pwd","cfrmpwd","Match","mobile","pattern","func","controls","ctrl","regexpression","test","value","namenotmatch","controlName","checkcontrolName","control","get","checkControl","errors","matching","keyPress","event","inputChar","String","fromCharCode","charCode","keyCode","preventDefault","signUp","invalid","post","subscribe","res","alert","console","log","reset","navigate","err","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\edubridge\\angular\\my-workspace\\projects\\input-output\\src\\app\\registration\\registration.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {FormGroup, FormBuilder, AbstractControl, FormControl, Validators, ValidationErrors, ValidatorFn} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MyserviceService } from '../myservice.service';\nimport { HttpClient } from '@angular/common/http';\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent {\n\n public signupForm !:FormGroup ;\n  submitted = false\n  constructor(private serv1:MyserviceService,private formBuilder: FormBuilder, private router : Router, private http:HttpClient){}\n      //Hook  function\n  ngOnInit():void{\n        //object\n      this.signupForm = this.formBuilder.group({\n          fullname: ['',[Validators.required,Validators.minLength(6),this.customename()]],\n          email:['',[Validators.required,Validators.email]],\n          pwd:['',[Validators.required,Validators.minLength(8) ]],\n          cfrmpwd:['',[Validators.required,Validators.minLength(8),this.Match('pwd', 'cfrmpwd') ]],\n          mobile: ['', [ Validators.required,Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{10}$\")]]\n      })\n  }\n\n  //validations\n  get func():{[m:string]:AbstractControl}\n  {\n      return this.signupForm.controls;\n  }\n  customename(){\n    return (ctrl:AbstractControl) : ValidationErrors | null =>\n    {\n      var regexpression = /^[a-zA-Z]+$/\n      if( ! regexpression.test(ctrl.value))\n              {\n                return {namenotmatch:true}\n              }\n\n      return null\n    };\n  }\n   Match(controlName:string, checkcontrolName:string): ValidatorFn\n  {\n      return (ctrl:AbstractControl)  =>\n      {\n            const control = ctrl.get(controlName)\n            const checkControl = ctrl.get(checkcontrolName)\n            if(checkControl?.errors && !checkControl.errors['matching']){\n              return null;\n            }\n            if(control?.value !== checkControl?.value){\n              return{matching:true};\n\n            }else{\n              return null;\n            }\n      };\n  }\n\n  keyPress(event: any) {\n    const pattern = /[0-9\\+\\-\\ ]/;\n    let inputChar = String.fromCharCode(event.charCode);\n    if (event.keyCode != 8 && !pattern.test(inputChar)) {\n      event.preventDefault();\n    }\n  }\n\n\n  //jsp server used navigate another page\n  signUp(){\n      this.submitted=true;\n      if(this.signupForm.invalid){\n        return\n      }\n      this.http.post<any>(\"http://localhost:3000/signupUser\",this.signupForm.value).subscribe(res=>{\n        alert(\"Regitration Successful !\");\n        console.log(this.signupForm.value);\n        this.signupForm.reset();\n        this.router.navigate(['/Login']);\n      },err=>{\n        alert(\"Something went wrong\");\n      });\n  }\n\n\n\n\n\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}